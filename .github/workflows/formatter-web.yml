name: Code formatter web files with prettier

on:
  workflow_call:
    inputs:
      all-changed-files-list:
        required: true
        type: string
      any-changed-files-list:
        required: true
        type: string
jobs:
  formatter:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0
          
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          
      - name: Get changed web file extensions
        if: ${{ inputs.any-changed-files-list == 'true' }}
        id: getext
        run: |
          import os
          files = '${{ inputs.all-changed-files-list }}'.split()
          extensions = set('*' + os.path.splitext(file)[1] for file in files)
          with open(os.getenv('GITHUB_ENV'), 'a') as f:
            f.write(f"CHANGED_EXTENSIONS={' '.join(extensions)}\n")
        shell: python

      - name: Install Prettier
        if: ${{ inputs.any-changed-files-list == 'true' }}
        run: | 
            npm install --save-dev prettier

      - name: Download centralized style config file
        run: curl -s -O https://raw.githubusercontent.com/esx-framework/.github/main/.github/actions/.prettierrc.json

      - name: Check prettier code format
        id: check-prettier-format
        if: ${{ inputs.any-changed-files-list == 'true' }}
        run: | 
            npx prettier --config .prettierrc.json --check ${{ inputs.all-changed-files-list }}
        continue-on-error: true
            
      - name: Format changed files with Prettier
        if: ${{ inputs.any-changed-files-list == 'true' && steps.check-prettier-format.outcome == 'failure' }}
        run: | 
            npx prettier --config .prettierrc.json --write ${{ inputs.all-changed-files-list }}

      - name: Generate formatted files list
        id: generate-formatted-list
        if: ${{ inputs.any-changed-files-list == 'true' && steps.check-prettier-format.outcome == 'failure' }}
        run: |
          echo -e ":art: Web code formatted\n$(
            echo "${{ inputs.all-changed-files-list }}" | tr ' ' '\n' | sed 's/^/Formatted file:  /'
          )" > commitmessage.txt

      - name: Set commit message
        if: ${{ inputs.any-changed-files-list == 'true' && steps.check-prettier-format.outcome == 'failure' }}
        id: commit-message-step
        run: |
          echo 'commit_message<<EOF' >> $GITHUB_OUTPUT
          cat commitmessage.txt >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create or Update .gitignore
        if: ${{ inputs.any-changed-files-list == 'true' && steps.check-prettier-format.outcome == 'failure' }}
        run: |
          echo "node_modules/" >> .gitignore
          echo "package.json" >> .gitignore
          echo "package-lock.json" >> .gitignore   

      - name: Update repo before push
        if: ${{ inputs.any-changed-files-list == 'true' && steps.check-prettier-format.outcome == 'failure' }}
        run: |
          git pull
          
      - name: Commit changed files and push current branch
        if: ${{ inputs.any-changed-files-list == 'true' && steps.check-prettier-format.outcome == 'failure' }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_user_name: ESX GITHUB ACTIONS BOT
          commit_user_email: esx-github-actions-bot@users.noreply.github.com
          commit_message: ${{ steps.commit-message-step.outputs.commit_message }}
          file_pattern: ${{ env.CHANGED_EXTENSIONS }}
          status_options: '--untracked-files=no'
          skip_fetch: false  
